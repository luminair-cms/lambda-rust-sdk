name: Build and publish Docker image to GHCR

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - 'release-*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-publish:
    name: Build, tag and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure image name and tags
        id: vars
        shell: bash
        run: |
          IMAGE="ghcr.io/$GITHUB_REPOSITORY"
          SHORT_SHA=${GITHUB_SHA:0:7}
          TAGS="$SHORT_SHA"

          # add 'latest' for main branch
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            TAGS="$TAGS latest"
          fi

          # if this is a tag push, add the tag name as a tag
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            REF_TAG="${GITHUB_REF#refs/tags/}"
            TAGS="$TAGS $REF_TAG"
          fi

          # convert space-separated tags to comma-separated for build-push-action
          TAGS_CSV=$(echo "$TAGS" | tr ' ' ',')
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "TAGS_CSV=$TAGS_CSV" >> $GITHUB_ENV
          echo "TAGS_RAW=$TAGS" >> $GITHUB_ENV

      - name: Build and push Docker image (with buildx)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAGS_CSV }}
          build-args: |
            USER=rust
            UID=1000
          # enable GitHub Actions cache for buildx
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output published image references
        run: |
          echo "Published images:"
          for t in $TAGS_RAW; do
            echo "- $IMAGE:$t"
          done